<?php
/**
<div class="p">
Script to process documentation requests for PHP files. After processing,
documentation sections, such as this, will appear part of the HTML page and
code chunks between documentation will appear as syntax highlighted, numbered
blocks.
</div>
*/
// example code block!
/**
<div class="p">
The first step is to determine the file to process. We expect that requests
for documentation of PHP files are redirected here by the HTTP server. The
general format of the request should look something like:
<pre>
'&lt;project&gt;/documentation/&lt;PHP file path&gt;'
</pre>
where PHP files are recognized by the '.php' extension. The request is mapped
to a file within the 'src' directory of the indicated project. For example:
<pre>
/foo/documentation/some/path/file.php =&gt; /home/user/playground/foo/src/some/path/file.php
</pre>
</div>
*/
$filePath = $_SERVER['REQUEST_URI'];
$project = preg_replace('/^\/documentation\/([^\/]+).*/', '$1', $filePath);
$filePath = preg_replace('/^\/documentation\//', '', $filePath);
$baseDir = '/home/user/playground';
$filePath = $baseDir . '/' . $filePath;
// read the file
$contents = file_get_contents($filePath);
$file = basename($filePath); // used as the page title
/**
<div class="p">
  The HTML intro is generated by the <a href="/TODO">page_open.php</a>
  snippet. At the moment, there is no support for modifying the header, but
  the process will support templates in some fashion as part of 1.0.
</div>
*/
$pageTitle = 'Dog Food Software || '.$file;
$headerTitle = $file;
$pageDescription = ''; // TODO
$pageAuthor = 'Liquid Labs, LLC';
$minifyBundle = 'fileDoc';
$isaTrail = array('<a href="/projects/">projects</a>',
                  '<a href="/projects/'.$project.'">'.$project.'</a>');
/**
<div class="p">
  Set up the code blocks. Add the resize handler, allowing the user to expand
  the code blocks, along with code to stop the resize when the maximum extent
  of the code has been reached.
</div>
*/
$extraHeader =
"   <script>
     $(document).ready(function() {
       prettyPrint(); // important to do pretty print first, otherwise elements have wrong size
       $('.prettyprintBox').each(function(i, el) {
         $(el).resizable({
	   alsoResize: $(el).find('pre'), /* resize the pre block within the div contanier */
	   handles: {'s': $(el).find('.resizeControl')}, /* limit to vertical / south */
	   maxHeight: $(el).find('pre').prop('scrollHeight') +
                      ($(el).prop('clientHeight') - $(el).find('pre').prop('clientHeight'))
	 });
       });
     });
   </script>\n";
require '/home/user/playground/dogfoodsoftware.com/runnable/page_open.php';
echo '<div class="grid_12">'."\n";
/**
<div class="p">
 It's now time to process the file itself. The basic idea is to iterate over
 the lines, looking for the documentation opening and closing
 markers. Documentation is extracted the rest is treated as code and placed
 into 'prettyprint' classes to be processed by
 <a href="https://code.google.com/p/google-code-prettify/">Google's pretty print JS</a>.
</div>
<div class="p">
There are basically two states: 'inDoc' and 'not inDoc', aka: in code. In
order to keep the line numbers in the code blocks correct, we count the lines
as we process them.
</div>
*/
$minExpandSize = 5;
$inDoc = false; // track state
$i = 0; // count lines
$codeCount = 0;
$currCodeId = null;
$lines = preg_split('/((\r?\n)|(\r\n?))/', $contents);
/**
<div class="p">
The code blocks are analyzed for length and those longer that
<code>$minExpandSize</code> are annotated with an expandable control allowing
viewers to expand the code block size. The <code>codeClose()</code> function
makes the determination.
</div>
 */
function codeClose($codeCount, $currCodeId) {
    global $minExpandSize;
    echo '</pre><div class="ui-resizable-handle ui-resizable-s resizeControl"></div></div>'."\n";
    // if the $codeCount is greater than 6, then apply the 'long' modifier,
    // which sets the initial height
    if ($codeCount > $minExpandSize)
	echo "<script>$('#".$currCodeId."').addClass('long');</script>";
}
foreach ($lines as $line) {
    // first, process the state changes
    if (preg_match('/^\s*(<\?php\s+)?\/\*\*\s*$/', $line)) {
	$inDoc = true;
	if ($i > 0) codeClose($codeCount, $currCodeId);
    }
    else if ($inDoc && preg_match('/^\s*\*\/(\s+\?>)?\s*$/', $line)) {
        // we only want to open a code block if there's any code left... in
        // other words, check for last line or last line blank (this isn't
        // foolproof but allows us to work around the issue for now)
        if ($i + 1 < count($lines) && ($i + 2 < count($lines) || strlen(trim($lines[$i + 1])) > 0)) {
	    $currCodeId = 'codeBlock'.$i;
	    echo '<div class="prettyprintBox"><pre id="'.$currCodeId.'" class="prettyprint linenums:'.($i + 2).'">'."\n";
	}
	$inDoc = false;
	$codeCount = -1; // start at -1 because we don't want to count this line, but '$codeCount' will be incremented
    }
    else if ($i == 0) {
	$currCodeId = 'codeBlock'.$i;
	echo '<div class="prettyprintBox"><pre id="'.$currCodeId.'" class="prettyprint linenums:'.($i + 1).'">'."\n";
	$codeCount = -1; // start at -1 because we don't want to count this line, but '$codeCount' will be incremented
	echo htmlspecialchars($line)."\n";
    }
    // Otherwise, process the line according to the state. In doc-mode, remove
    // leading stars and spaces to make compatibla with Java-style docs set-off.
    else if ($inDoc) echo preg_replace('/^\s*\*?\s*/', '', $line)."\n";
    else echo htmlspecialchars($line)."\n";
    $i += 1;
    if (!$inDoc) $codeCount += 1;
}
/**
<div class="p">
  Finally, we check whether we need to close the final code block and spit out
  the page closing stuff.
</div>
*/
if (!$inDoc) codeClose($codeCount, $currCodeId);
echo '
</div><!-- .blurbSummary .grid_12 -->
';
require '/home/user/playground/dogfoodsoftware.com/runnable/page_close.php';
/**
<!-- it's a bit of a hack injecting another section at the moment; have to --
  -- close the implicit blurb summary div here, but not the explicit one later --
  -- blurb summary close bacuse that will be done by the php-processor itself -->
	  </div>
	<div class="grid_12 blurbSummary">
	  <div class="blurbTitle">
		Code Resize Notes
	  </div>
<div class="p">
The resize handle must be within the resizable item. It seems there is some
interaction with the PRE element, however, because the container won't resize
even when the height is left unspecified which should, I believe, result in
auto-resizing behavior.
</div>
<div class="p">
It is therefore necessary to use the 'alsoResize' feature. I'm not convinced
this is actually necessary, but it's working so I'm leaving it in place for
now.
</div>
<div class="p">
  One other (seeming) idosyncrosy to note: you can't the drag-handle image
  inside the drag handle div, it has to be used as a background to the div;
  the problem is that if the image is it's own element in the div, you cannot
  actually grab where the image is, it hides the div and is not itself part of
  the drag handle. I.e., the drag handle element must not have any (visible)
  children.
</div>
*/ ?>
